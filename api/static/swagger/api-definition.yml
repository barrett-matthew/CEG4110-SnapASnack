swagger: "2.0"
info:
  description: "This is an API to submit Images to the SeeFood AI which will determine if an image contains food. The API also provides the ability to comment on the uploaded images."
  version: "1.0.0"
  title: "Snap a' Snack API"
  contact:
    email: "ropp.14@wright.edu"
host: ""
basePath: "/"
tags:
- name: "comment"
  description: "API for retrieving information about a comment"
- name: "image"
  description: "API to manage uploading, retrieving and adding comments to an image"
schemes:
- "http"
paths:
  /images/:
    post:
      tags:
      - "image"
      summary: "Add an image or images to the DB and run the AI"
      description: ""
      operationId: "addImage"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "formData"
        name: "images"
        type: "file"
        description: "The file to upload."
      responses:
        400:
          description: "Invalid input"
        200:
          description: "Image added Sucessfully"
    get:
      tags:
      - "image"
      summary: "Get a list of uploaded images"
      description: ""
      operationId: "GetImages"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "page"
        description: "Page of image objects to retrieve will default to 1"
        schema:
          type: "string"
      - in: "query"
        name: "sort"
        description: "Valid values to sort by (comments, score, posted_at) will default to posted_at"
        schema:
          type: "string"
      - in: "query"
        name: "direction"
        description: "Valid values to direct the sort (desc, asc) will default to desc"
        schema:
          type: "string"
      responses:
        200:
          description: "Get list of images"
          schema:
            type: 'array'
            items: 
              $ref: "#/definitions/Image"
  /images/{imageId}/:
    get:
      tags:
      - "image"
      summary: "Retrieve image by id"
      description: "Returns a single image"
      operationId: "getImageById"
      produces:
      - "application/json"
      parameters:
      - name: "imageId"
        in: "path"
        description: "ID of the image to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Image"
        404:
          description: "Image not found"
  /images/{imageId}/comments/:
    get:
      tags:
      - "image"
      - "comment"
      summary: "Gets all Comments on an Image"
      description: ""
      operationId: "imageComments"
      produces:
      - "application/json"
      parameters:
      - name: "imageId"
        in: "path"
        description: "ID of the image to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
  /images/{imageId}/add_comment/:
    post:
      tags:
      - "image"
      - "comment"
      summary: "Add a comment to a Image"
      description: ""
      operationId: "imageAddComment"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "imageId"
        in: "path"
        description: "ID of the image to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "formData"
        name: "text"
        type: "string"
        description: The text to comment.  
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
  /comments/{commentId}/:
    get:
      tags:
      - "comment"
      summary: "Get Information about a comment"
      description: ""
      operationId: "getComment"
      produces:
      - "application/json"
      parameters:
      - name: "commentId"
        in: "path"
        description: "ID of the comment to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Invalid Comment"
definitions:
  Image:
    type: "object"
    properties:
      id:
        type: "integer"
      has_food:
        type: "number"
      not_food:
        type: "number"
      image_location:
        type: "string"
      thumbnail_location:
        type: "string"
      posted_at:
        type: "string"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      image:
        type: "string"
      text:
        type: "string"
      posted_at:
        type: "string"
